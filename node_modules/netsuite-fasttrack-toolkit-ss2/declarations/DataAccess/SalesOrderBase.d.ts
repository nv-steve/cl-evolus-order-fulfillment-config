import { Sublist, SublistLine } from './Sublist';
import * as record from 'N/record';
import { TransactionBase } from './Transaction';
import { AddressBase } from './AddressBase';
/**
 * Sublist 'item' on the Sales Order record
 */
export declare class ItemSublist extends SublistLine {
    altsalesamt: number;
    amortizationperiod: string;
    amortizationtype: string;
    amount: number;
    billvariancestatus: string;
    catchupperiod: number;
    chargetype: string;
    commitinventory: number;
    costestimate: number;
    costestimaterate: number;
    costestimatetype: number;
    createdpo: number;
    createpo: number;
    createwo: boolean;
    daysbeforeexpiration: string;
    description: string;
    deferrevrec: boolean;
    excludefromraterequest: boolean;
    expectedshipdate: Date;
    fromjob: boolean;
    giftcertfrom: string;
    giftcertmessage: string;
    giftcertrecipientemail: string;
    giftcertrecipientname: string;
    id: string;
    isclosed: boolean;
    isestimate: boolean;
    istaxable: boolean;
    isvsoebundle: string;
    item: number;
    itemfulfillmentchoice: string;
    itemsubtype: string;
    itemtype: string;
    licensecode: string;
    line: string;
    lineuniquekey: string;
    linenumber: number;
    location: number;
    locationautoassigned: boolean;
    matrixtype: string;
    noautoassignlocation: boolean;
    options: string;
    orderpriority: number;
    porate: number;
    povendor: string;
    price: number;
    printitems: string;
    quantity: number;
    quantityavailable: number;
    quantitybackordered: number;
    quantitybilled: number;
    quantitycommitted: number;
    quantityfulfilled: number;
    quantityrevcommitted: number;
    rate: number;
    rateschedule: string;
    revrecschedule: number;
    revrecstartdate: Date;
    revrecenddate: Date;
    shipaddress: number;
    shipcarrier: number;
    shipmethod: number;
    subscription: number;
    taxcode: number;
    taxrate1: number;
    units: number;
    vsoeallocation: number;
    vsoeamount: number;
    vsoedeferral: number;
    vsoedelivered: boolean;
    vsoeisestimate: boolean;
    vsoepermitdiscount: number;
    vsoeprice: number;
    vsoesopgroup: number;
}
/**
 * 'salesteam' sublist
 */
export declare class SalesTeamSublist extends SublistLine {
    contribution: number;
    employee: number;
    isprimary: boolean;
    salesrole: number;
}
/**
 * NetSuite Sales Order Record
 */
export declare class SalesOrderBase extends TransactionBase {
    allowemptycards: boolean;
    althandlingcost: number;
    altsalestotal: number;
    altshippingcost: number;
    authcode: string;
    balance: number;
    billaddresslist: number;
    billingaddress: AddressBase;
    billingschedule: number;
    billisresidential: string;
    canhavestackable: boolean;
    ccapproved: boolean;
    ccavsstreetmatch: number;
    ccavszipmatch: number;
    ccexpiredate: string;
    cchold: string;
    ccholdetails: string;
    cciavsmatch: number;
    ccname: string;
    ccnumber: string;
    ccprocessoraccount: string;
    ccsecuritycode: string;
    ccsecuritycodematch: number;
    ccstreet: string;
    cczipcode: string;
    class: number;
    consolidatebalance: number;
    couponcode: number;
    createdfrom: number;
    creditcard: number;
    creditcardprocessor: number;
    currency: number;
    currencyname: string;
    currencysymbol: string;
    customercode: string;
    debitcardissueno: string;
    deferredrevenue: number;
    discountitem: number;
    discountrate: number;
    discounttotal: number;
    draccount: number;
    enddate: Date | null;
    entitynexus: number;
    entitytaxregnum: number;
    estgrossprofit: number;
    estgrossprofitpercent: string;
    exchangerate: number;
    excludecommission: boolean;
    fob: string;
    fxaccount: number;
    getauth: boolean;
    giftcertapplied: number;
    handlingcost: number;
    handlingtax1rate: string;
    handlingtaxcode: number;
    ignoreavs: boolean;
    ignorecsc: boolean;
    inputpnrefnum: string;
    intercostatus: number;
    intercotransaction: number;
    isbasecurrency: boolean;
    isdefaultshippingrequest: string;
    ismultishipto: boolean;
    ispurchasecard: string;
    isrecurringpayment: boolean;
    item: Sublist<ItemSublist>;
    leadsource: number;
    linkedtrackingnumbers: string;
    message: string;
    messagesel: number;
    muccpromocodeinstance: string;
    nextbill: Date | null;
    nexus: number;
    onetime: number;
    opportunity: number;
    overridehold: boolean;
    overrideholdchecked: boolean;
    overrideshippingcost: number;
    partner: number;
    paymenteventdate: Date | null;
    paymenteventholdreason: number;
    paymenteventpurchasedatasent: string;
    paymenteventresult: number;
    paymenteventtype: string;
    paymenteventupdatedby: string;
    paymentmethod: number;
    paypalauthid: string;
    paypalprocess: boolean;
    paypalstatus: string;
    paypaltranid: string;
    pnrefnum: string;
    promocode: number;
    promocodepluginimpl: string;
    recognizedrevenue: number;
    recurannually: number;
    recurmonthly: number;
    recurquarterly: number;
    recurweekly: number;
    returntrackingnumbers: string;
    revcommitstatus: string;
    revenuestatus: string;
    revreconrevcommitment: boolean;
    saleseffectivedate: Date | null;
    salesgroup: number;
    salesteam: Sublist<SalesTeamSublist>;
    shipaddresslist: number;
    shipcomplete: boolean;
    shipdate: Date | null;
    shipisresidential: string;
    shipmethod: number;
    shipoverride: string;
    shippingaddress: AddressBase;
    shippingcost: number;
    shippingcostoverridden: string;
    shippingtax1rate: string;
    shippingtaxcode: number;
    softdescriptor: string;
    source: string;
    startdate: Date | null;
    subsidiarytaxregnum: number;
    subtotal: number;
    syncpartnerteams: boolean;
    syncsalesteams: boolean;
    taxdetailsoverride: boolean;
    taxitem: number;
    taxrate: number;
    taxregoverride: boolean;
    taxtotal: number;
    terms: number;
    threedstatuscode: string;
    tobeemailed: boolean;
    tobefaxed: boolean;
    tobeprinted: boolean;
    total: number;
    totalcostestimate: number;
    tranisvsoebundle: boolean;
    unbilledorders: number;
    validfrom: string;
    vsoeautocalc: boolean;
    static recordType(): record.Type;
}
